#      _____                          _
#     / ____|                        | |
#    | (___   ___ _ ____   _____ _ __| | ___  ___ ___
#     \___ \ / _ \ '__\ \ / / _ \ '__| |/ _ \/ __/ __|
#     ____) |  __/ |   \ V /  __/ |  | |  __/\__ \__ \
#    |_____/ \___|_|    \_/ \___|_|  |_|\___||___/___/
#      _____ _
#     / ____| |          | |
#    | (___ | | __ _  ___| | __
#     \___ \| |/ _` |/ __| |/ /
#     ____) | | (_| | (__|   <
#    |_____/|_|\__,_|\___|_|\_\
#
#
#
# This file is the main config file for your bot.
# You can always add more config options for more control.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!


service: lobot

custom:
  # Log all events to CloudWatch
  slack_enable_logging: true

  # The path used to post Slack events to
  slack_event_path: slack

  # The path used to install the Slack App
  slack_install_path: slack

  # Space delimited scopes
  slack_client_scopes: "bot commands incoming-webhook"

  # The path to redirect to after an install
  slack_install_redirect: https://slack.com

  deployStage: ${opt:stage, self:provider.stage}

  stage_vars: ${file(env/${self:custom.deployStage}.yml)}


provider:
  name: aws
  runtime: nodejs4.3
  profile: serverless
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  environment:
    ENABLE_LOGGING: ${self:custom.slack_enable_logging}
    CLIENT_SCOPES: ${self:custom.slack_client_scopes}
    INSTALL_REDIRECT: ${self:custom.slack_install_redirect}
    CLIENT_ID: ${self:custom.stage_vars.slack_client_id}
    CLIENT_SECRET: ${self:custom.stage_vars.slack_client_secret}
    VERIFICATION_TOKEN: ${self:custom.stage_vars.slack_verification_token}
    CHALLONGE_TOKEN: ${self:custom.stage_vars.challonge_token}
    TEAM_ID: ${self:custom.stage_vars.team_id}
    CURRENT_LEAGUE_ID: ${self:custom.stage_vars.current_league_id}
    TABLE_NAME: ${self:custom.stage_vars.slack_table_name}


functions:
  slack:
    handler: src/index.handler
    events:
      ## Slash Commands, Events, and Interactive Messages
      - http:
          path: ${self:custom.slack_event_path}
          method: post
          integration: lambda
          response:
            template: $input.path('$')

      ## OAuth Routes
      - http:
          path: ${self:custom.slack_install_path}
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                code: true
                state: true
          response:
            statusCodes:
              201:
                pattern: ''
              301:
                pattern: http.*
                headers:
                  Location: integration.response.body.errorMessage
                  Cache-Control: "'no-cache, no-store, must-revalidate'"

  escrow_notify:
    handler: src/escrow-notify.handler
    events:
      - http: POST escrow-notify

resources:
  Resources:
    TeamsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.stage_vars.slack_table_name}

package:
  exclude:
    - env/
    - .git/**
